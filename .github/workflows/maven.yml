# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# le nom du workflow : "Java CI with Maven".
name: Java CI with Maven

# Cette section définit les événements qui déclenchent le workflow :
on:
  push: # push: Le workflow sera exécuté à chaque push vers la branche "master".
    branches: [ "master" ]
  pull_request: # pull_request: Le workflow sera également exécuté pour chaque pull request ciblant la branche "master".
    branches: [ "master" ]

jobs: # Cette section définit un job nommé "build". 
  build:
    permissions: write-all
    runs-on: ubuntu-latest # Le job s'exécute sur un runner Ubuntu-latest.

    steps:
    - uses: actions/checkout@v4 # utilise l'action actions/checkout@v4 pour récupérer le code source du dépôt GitHub dans le runner
    - name: Set up JDK 17 # utilise l'action actions/setup-java@v4 pour configurer un JDK 17 sur le runner
      uses: actions/setup-java@v4
      with:
        java-version: '17' # Spécifie la version de Java à installer (ici, 17).
        distribution: 'temurin' # Indique la distribution Java à utiliser (ici, Temurin d'AdoptOpenJDK).
        cache: maven # Active la mise en cache des artefacts Maven pour optimiser l'exécution du workflow.
    - name: Build with Maven # exécute la commande mvn -B package --file pom.xml pour construire le projet Java en utilisant Maven
      run: mvn -B package --file pom.xml # L'option -B désactive la sortie de la barre de progression de Maven pour un affichage plus propre dans le journal du workflow.
